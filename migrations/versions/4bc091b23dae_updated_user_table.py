"""updated user table

Revision ID: 4bc091b23dae
Revises: 4fb09da0541d
Create Date: 2025-08-17 11:42:29.929832"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '4bc091b23dae'
down_revision = '4fb09da0541d'
branch_labels = None
depends_on = None


def upgrade():
    # ensure pgcrypto exists (needed for gen_random_uuid)
    op.execute('CREATE EXTENSION IF NOT EXISTS "pgcrypto";')

    # add the three new columns
    with op.batch_alter_table('users') as batch_op:
        batch_op.add_column(sa.Column('is_verified', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('verification_token', sa.String(length=255), nullable=True))
        batch_op.add_column(sa.Column('verification_token_expires_at', sa.DateTime(), nullable=True))

    # convert INT PK -> UUID PK via column swap (id_uuid)
    op.execute("""
    DO $$
    BEGIN
        IF EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name='users' AND column_name='id' AND data_type='uuid'
        ) THEN
            RAISE NOTICE 'users.id already UUID, skipping swap';
        ELSE
            -- add temp UUID column
            ALTER TABLE users ADD COLUMN id_uuid UUID DEFAULT gen_random_uuid();

            -- drop old PK constraint if it exists
            ALTER TABLE users DROP CONSTRAINT IF EXISTS users_pkey;

            -- drop old int id
            ALTER TABLE users DROP COLUMN id;

            -- rename and re-PK
            ALTER TABLE users RENAME COLUMN id_uuid TO id;
            ALTER TABLE users ADD PRIMARY KEY (id);
        END IF;
    END$$;
    """)

    # widen some columns to new sizes / types
    with op.batch_alter_table('users') as batch_op:
        batch_op.alter_column('first_name',
                              existing_type=sa.VARCHAR(length=50),
                              type_=sa.String(length=80),
                              existing_nullable=False)
        batch_op.alter_column('last_name',
                              existing_type=sa.VARCHAR(length=50),
                              type_=sa.String(length=80),
                              existing_nullable=False)
        batch_op.alter_column('email',
                              existing_type=sa.VARCHAR(length=120),
                              type_=sa.String(length=255),
                              existing_nullable=False)
        batch_op.alter_column('password_hash',
                              existing_type=sa.VARCHAR(length=256),
                              type_=sa.String(length=255),
                              existing_nullable=False)
        batch_op.alter_column('verified_at',
                              existing_type=postgresql.TIMESTAMP(timezone=True),
                              type_=sa.DateTime(),
                              existing_nullable=True)
        batch_op.alter_column('created_at',
                              existing_type=postgresql.TIMESTAMP(timezone=True),
                              type_=sa.DateTime(),
                              nullable=True)
        batch_op.alter_column('updated_at',
                              existing_type=postgresql.TIMESTAMP(timezone=True),
                              type_=sa.DateTime(),
                              nullable=True)
        batch_op.create_unique_constraint(None, ['verification_token'])

def downgrade():
    # best-effort rollback (UUID -> INT)
    op.execute("""
    DO $$
    BEGIN
        IF EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name='users' AND column_name='id' AND data_type='uuid'
        ) THEN
            ALTER TABLE users DROP CONSTRAINT IF EXISTS users_pkey;
            ALTER TABLE users ADD COLUMN id_int INTEGER GENERATED BY DEFAULT AS IDENTITY;
            ALTER TABLE users DROP COLUMN id;
            ALTER TABLE users RENAME COLUMN id_int TO id;
            ALTER TABLE users ADD PRIMARY KEY (id);
        END IF;
    END$$;
    """)

    with op.batch_alter_table('users') as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('updated_at',
                              existing_type=sa.DateTime(),
                              type_=postgresql.TIMESTAMP(timezone=True),
                              nullable=False,
                              existing_server_default=sa.text('now()'))
        batch_op.alter_column('created_at',
                              existing_type=sa.DateTime(),
                              type_=postgresql.TIMESTAMP(timezone=True),
                              nullable=False,
                              existing_server_default=sa.text('now()'))
        batch_op.alter_column('verified_at',
                              existing_type=sa.DateTime(),
                              type_=postgresql.TIMESTAMP(timezone=True),
                              existing_nullable=True)
        batch_op.alter_column('password_hash',
                              existing_type=sa.String(length=255),
                              type_=sa.VARCHAR(length=256),
                              existing_nullable=False)
        batch_op.alter_column('email',
                              existing_type=sa.String(length=255),
                              type_=sa.VARCHAR(length=120),
                              existing_nullable=False)
        batch_op.alter_column('last_name',
                              existing_type=sa.String(length=80),
                              type_=sa.VARCHAR(length=50),
                              existing_nullable=False)
        batch_op.alter_column('first_name',
                              existing_type=sa.String(length=80),
                              type_=sa.VARCHAR(length=50),
                              existing_nullable=False)
        batch_op.drop_column('verification_token_expires_at')
        batch_op.drop_column('verification_token')
        batch_op.drop_column('is_verified')      